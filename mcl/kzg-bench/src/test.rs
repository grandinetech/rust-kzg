// use std::{mem, vec};
use mcl_rust::mcl_methods::*;
use std::mem;
// use mcl_rust::utilities::*;
// use mcl_rust::kzg10::*;
use mcl_rust::data_types::{fp::*, fp2::*, fr::*, g1::*, g2::*, gt::*};
use mcl_rust::CurveType;
// use mcl_rust::fk20_fft::*;
// use mcl_rust::fk20_matrix::*;

#[test]
#[allow(clippy::many_single_char_names)]
fn mcl_test() {
    assert_eq!(mem::size_of::<Fr>(), 32);
    assert_eq!(mem::size_of::<Fp>(), 48);
    assert_eq!(mem::size_of::<Fp2>(), 48 * 2);
    assert_eq!(mem::size_of::<G1>(), 48 * 3);
    assert_eq!(mem::size_of::<G2>(), 48 * 2 * 3);
    assert_eq!(mem::size_of::<GT>(), 48 * 12);
    assert!(init(CurveType::BLS12_381));
    assert_eq!(get_fp_serialized_size(), 48);
    assert_eq!(get_g1_serialized_size(), 48);
    assert_eq!(get_g2_serialized_size(), 48 * 2);
    assert_eq!(get_gt_serialized_size(), 48 * 12);
    assert_eq!(get_fr_serialized_size(), 32);

    // Fp
    assert_eq!(get_field_order(), "4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787");
    // Fr
    assert_eq!(
        get_curve_order(),
        "52435875175126190479447740508185965837690552500527637822603658699938581184513"
    );

    field_test! {Fr};
    field_test! {Fp};

    let p = G1::from_str("1 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569", 10).unwrap();
    let q = G2::from_str("1 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582", 10).unwrap();

    ec_test! {G1, Fp, p};
    ec_test! {G2, Fp2, q};

    let x = Fr::from_int(3);
    let y = Fp::from_int(-1);
    let mut e = GT::zero();
    pairing(&mut e, &p, &q);
    serialize_test! {Fr, x};
    serialize_test! {Fp, y};
    serialize_test! {G1, p};
    serialize_test! {G2, q};
    serialize_test! {GT, e};
}

// const GEN_G1_STR: &str = "1 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569";
// const GEN_G2_STR: &str = "1 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582";
// #[test]
// fn curve_new_sets_g1_gen_to_correct_val() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     // Act
//     let curve = Curve::new(&Fr::one(), 1);
//     // Assert
//     let result = curve.g1_gen.get_str(10);
//     assert_eq!(GEN_G1_STR, result);
// }

// #[test]
// fn curve_new_sets_g2_gen_to_correct_val() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     // Act
//     let curve = Curve::new(&Fr::one(), 1);
//     // Assert
//     let result = curve.g2_gen.get_str(10);
//     assert_eq!(GEN_G2_STR, result);
// }

// #[test]
// fn curve_new_first_g1_point_is_generator() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     // Act
//     let curve = Curve::new(&Fr::one(), 1);
//     // Assert
//     let result = curve.g1_points[0].get_str(10);
//     assert_eq!(GEN_G1_STR, result);
// }

// #[test]
// fn curve_new_first_g2_point_is_generator() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     // Act
//     let curve = Curve::new(&Fr::one(), 1);
//     // Assert
//     let result = curve.g2_points[0].get_str(10);
//     assert_eq!(GEN_G2_STR, result);
// }

// #[test]
// fn curve_new_g1_points_should_have_exact_values_given_specific_params() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     let secret = Fr::from_str("1927409816240961209460912649124", 10);
//     // Act
//     let curve = Curve::new(&secret.unwrap(), 17);

//     // Assert
//     let strs: Vec<String> = curve.g1_points.iter().map(|x| x.get_str(10)).collect();

//     let expected = [
//         "1 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569",
//         "1 2152869591689196284448695346189574884812111481958382828258011215851576980696076283357586937048281406709538669668556 1837985193201176164563363095685788695060722952730414729513827449189998486108746221085867464994192483925080285065018",
//         "1 3262605383935052083682746418410148264888435523851787883646428634651057127775051437848295094756022375626344454529853 170376908770402617588871716106905630704800483257535202301637743269417617389615424187202633271003852068580182760145",
//         "1 880220465676249036392707021793508724521687313339128521628378026681982232143465812471317982023333854734330480948673 2902223523920951554723894475268175106169924753723683323415827815697283974835754478310015241899366201222645054649608",
//         "1 3244388122438103216409647202891415823727015100716970678191779835123826603745878948836800400002635659162267031975583 1585253991742417487161783435845975575940496801371133300360989731905095816244520655199543596433385055483512833757601",
//         "1 1691444095738545636838570153348610026182961225323356293730618623455617099056679194783075235346140714244554956873033 961647227525848937006956574637866372979536342809091069926681629924395961591459720348224030656076442822973218085550",
//         "1 3577901166225087165094130311167725910816358129621364033783794190115179171035326630844229271546155259801088983862479 3092642789043285621253509221940543294037789204421586765911962911994791146080221763753835525158184924558752020565291",
//         "1 3013186384424179439775834119326464143135586883979982227880894049363998889225981543565484795480442461763905556101762 2478178060772079991661592547244530979985617852562178845899785854640900915922275633937010001028451411707598232298832",
//         "1 2399231498671876712809138864159907535047647996068498551664715372729570379868491143868576593216337700083434635379685 482713507023481840088214347482905793358357894612071198190992625150626572379700355268448916577827133516290766497622",
//         "1 3969977694904317593192991000252371163313871217135365989839005125424170023895776071038962785493744895844713942612974 4413699249467038796028960432613629427107969427001375982715766204951543003390119367884220008325083276852454909781",
//         "1 194075085492710730179274360855839046245139911409378180773739622831795665144267111066969149760214641537576331892106 2829985443790966823527351173358032012294116269530327251028202388989851835102944896169897747047401344807088160112615",
//         "1 3280685826964465549968732412388399530552593104925613549928682916052288843943420728109800551779100636680533358924443 298681365483796231406540809779630027096164486961762590101806824599619177657034359801891143498721811778563760637265",
//         "1 3400935219571983529219239890354858045697412824966239298938573345769483174728220352364464899823354648929772679742552 191348415359823743448098111145821414668135484237623052156975028197191932451915485624239658088947171507703851149457",
//         "1 3374538774097525861555904858666250834790705983053158676667960471408213151238217454016543185985604089823231022873495 3258515632833107359343766033193307526227113423713039039660926225561152436287447196511646604996224783556594615862297",
//         "1 84257718831135536599708664101759228548259087509946180939819270114426033813393924094069423610123184508861693807222 1425072665498715675588703937845375337020452759807133251766395540291673980878175955156843196123520432067102459055363",
//         "1 3252002729706195882623612396123269947851274285378019889513328537606104266375911074185178476483143881219657281907365 2744825182574836694639045426047274581117055175119425124924870369929899567807025339868314937727954579104158715615767",
//         "1 3105530220482690203381088120196667002396187280376878591204985144810501655541159693720070013410365841734894244215545 2515128161348588248190794853040865399542397670879510720694265058064715843238549344693260209850633864871507776822678"
//         ];

//     assert_eq!(expected.len(), strs.len());
//     let all_values_equal = expected.iter().zip(strs.iter()).all(|(a, b)| a == b);
//     assert!(all_values_equal);
// }

// #[test]
// fn polynomial_generate_proof_at_should_have_a_specific_value_given_exact_inputs() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     let coefficients = vec![1, 2, 3, 4, 7, 7, 7, 7, 13, 13, 13, 13, 13, 13, 13, 13];
//     let poly = Polynomial::from_i32(&coefficients);
//     let secret = Fr::from_str("1927409816240961209460912649124", 10);
//     let curve = Curve::new(&secret.unwrap(), poly.order());

//     let point = Fr::from_int(17);
//     // Act
//     let proof = poly.gen_proof_at(&curve.g1_points, &point);
//     // Assert
//     let expected = "1 867803339007397142967426903694725732786398875082812714585913536387867789215930966591756718433944432919654354450045 1056604647851765547809696011101405958529416282518275445556537937608095695960215709670255078026676619389223749112525";
//     let actual = proof.get_str(10);
//     assert_eq!(expected, actual);
// }

// #[test]
// fn polynomial_commit_should_have_specific_value_given_exact_inputs() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     let coefficients = vec![1, 2, 3, 4, 7, 7, 7, 7, 13, 13, 13, 13, 13, 13, 13, 13];
//     let poly = Polynomial::from_i32(&coefficients);
//     let secret = Fr::from_str("1927409816240961209460912649124", 10);
//     let curve = Curve::new(&secret.unwrap(), poly.order());
//     // Act
//     let commitment = poly.commit(&curve.g1_points);
//     // Assert
//     let expected = "1 2477800657478396280496910737712311876776119382023479023481824166251818861301026600704438635866253640104679377733301 2954229993619572531997767690230550003591055333364019243777247691138518393343620011708288769387987906907914339131963";
//     let actual = commitment.get_str(10);
//     assert_eq!(expected, actual);
// }

// // #[test]
// // fn curve_is_proof_valid_should_return_true_when_same_parameters_used_for_gen_are_passed() {
// //     // Arrange
// //     assert!(init(CurveType::BLS12_381));
// //     let coefficients = vec![1, 2, 3, 4, 7, 7, 7, 7, 13, 13, 13, 13, 13, 13, 13, 13];
// //     let poly = Polynomial::from_i32(&coefficients);
// //     let secret = Fr::from_str("1927409816240961209460912649124", 10);
// //     let curve = Curve::new(&secret.unwrap(), poly.order());
// //     let x = Fr::from_int(17);
// //     let y = poly.eval_at(&x);
// //     let proof = poly.gen_proof_at(&curve.g1_points, &x);
// //     let commitment = poly.commit(&curve.g1_points);

// //     // Act
// //     let is_valid = curve.is_proof_valid(&commitment, &proof, &x, &y);

// //     // Assert
// //     assert!(is_valid);
// // }

// #[test]
// fn proof_loop_works_with_random_points() {
//         // Arrange
//         assert!(init(CurveType::BLS12_381));
//         let coefficients = vec![1, 2, 3, 4, 7, 7, 7, 7, 13, 13, 13, 13, 13, 13, 13, 13];
//         let poly = Polynomial::from_i32(&coefficients);
//         let secret = Fr::from_str("1927409816240961209460912649124", 10);
//         let curve = Curve::new(&secret.unwrap(), poly.order());
//         let mut x = Fr::default();
//         x.set_by_csprng();
//         let y = poly.eval_at(&x);
//         let proof = poly.gen_proof_at(&curve.g1_points, &x);
//         let commitment = poly.commit(&curve.g1_points);

//         // Act
//         let is_valid = curve.is_proof_valid(&commitment, &proof, &x, &y);

//         // Assert
//         assert!(is_valid);
// }

// // FFT | FK20

// #[test]
// fn fk20matrix_new_builds_valid_settings() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     let chunk_len: usize = 16;
//     let chunk_count: usize = 32;
//     let n = chunk_len * chunk_count;
//     let secret = Fr::from_str("1927409816240961209460912649124", 10).unwrap();
//     let kzg_curve = Curve::new(&secret, n * 2);

//     // Act
//     let _matrix = FK20Matrix::new(kzg_curve, n * 2, chunk_len, 10);

//     // Assert
//     // Correctness can be implied from first few values (16 in this case), they should already fail if the math is wrong

//     let expected = vec! [
//         vec![
//             "1 2690832516741773119369730195519233968670522532392277474918267333033611475380645539270351007440482196987183887535296 3175213108544898085235166650679988026781072495712618074575168602254234390929160150851454512872056164806990780792922",
//             "1 2072581413858441891826784938377829697673783610659410996308538512601613765043399095800516290404055589595125799432122 142040439119123504001234579304338655335210122734240515030365715479774071518630496001621684305521225040450706348551",
//             "1 555010171546632414521023935674583992733334771853376894411915581475492990139012758601221152458226727016075286216242 2062479129870967993306760396974811168673763387664849025697582237771721030661986154982695543533682664546516347371968",
//             "1 3274267611093990689706613371114507668087156239339065210265274210658495136561870064066396901301804354860098305637773 1241367983506779525903776542849574539651055454935231205394295862302812863367013952476859950248432249611367763641340"
//         ],
//         vec![
//             "1 81522731869730999016959108083541803120177810361736504886071026273980013178149605563448968405343219016356457377406 223274507986138220257689974122380902783145216603518153965998726451791348801627930908125076444038423438559369671335",
//             "1 3808464147164295345562978721284821594881637392419762556251712176551059711254755949783485066757083577643300339738721 2337549690718040172853841991558609929010921665385090242504524831444799802230084391557597182183378960598988157802881",
//             "1 1661106895620331931115890729226506793498011737553071873254899785190234378452033779328593622276377978000761133037174 2445347359869286892162840464558476532632011042616786499244072070198386047563170774354968963497330110714438435368937",
//             "1 726908696109837797869899134069048163881394782609717052922719680227299711126127802782293660508110445479794886391401 187298544861488465989428414398245070629614927536653835940256772000120459492183965098569970036249145900702528979827"
//         ],
//         vec![
//             "1 3929179374960622172469324744576568313316341672612295875559925412502214813185246547462214191845133455654404464431034 177314913203158567442861000406323035228440243612857286237333697289368056582084667990049976226354155824278044028426",
//             "1 2810866607762757510487238314227157563656118171761037767974389692498157494265088725741234636840180283484125764176526 1153340612075592623161861036254693462133315972889763901198162727295011215538060079719205772192574089536241444413835",
//             "1 2352507531104726620898783532555364575782896024235836241392390863453154114636517685772562779410947050627812034072696 331974667649324341661653091834745820547065903394704077483844952289903755698654916183305775816301208642629324471541",
//             "1 2957732685660581771925637615807550148325705520173275796227684635236124841259383250952421665771963820726076493196248 338553886723949572883804365524830562024026898652359650933083054801490785805523765168050975042270646485897644019017"
//         ],
//         vec![
//             "1 3436597092609499366310156490230285384204497124660023916476036969277149477335171650302251387977464315802038218054432 1013543446377923239229961246336359501594126239606195398173820625012770253827026398483791670086988400847612228427838",
//             "1 1409052333937843415498761271262190356511721853350750319265371330255898309407438908370572807856827206959888511441367 3596468817253648457210601545007261268736681745416046300717714875685865557954316628580965013164962441617400335917668",
//             "1 1025004965225058732445243741231944317494892072556798478905167726638397386436922188895144678987782142961770271023278 207421088022499784706717350268057238112320710669626250564329439615036440987208898297017341060271480322006449501306",
//             "1 173056978640834285267728646360319198265311839401954061920970102546631676339475037629314948445833468137008003754256 431688197610227819993661736708924947195077534539500276871543225713960859228823234674470547057839182178354038654930"
//         ]
//     ];

//     for (_i, item) in expected.iter().enumerate().take(4) {
//         for (j, item2) in item.iter().enumerate().take(4) {
//             let str = *item2;
//             assert_eq!(item[j], str);
//         }
//     }
// }

// #[test]
// fn get_next_power_of_two_returns_correct_values() {
//     // Arrange
//     let xs: Vec<usize> = vec![
//         2,
//         4,
//         5,
//         15,
//         16,
//         32,
//         64,
//         63,
//         122,
//         250,
//         510,
//         1023
//     ];

//     // Act
//     let x_next_pows: Vec<usize> = xs.iter().map(|x| next_pow_of_2(*x)).collect();

//     // Assert
//     let expected = [
//         2, 4, 8, 16, 16, 32, 64, 64, 128, 256, 512, 1024
//     ];

//     fn assert_eq_ints(a: i32, b: i32){
//         assert_eq!(a, b);
//     }

//     expected.iter().zip(x_next_pows)
//         .for_each(|(a, b)| assert_eq_ints(*a, b as i32));

// }

// #[test]
// fn dau_using_fk20_multi_generates_exact_values_given_known_inputs() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     let chunk_len: usize = 16;
//     let chunk_count: usize = 32;
//     let n = chunk_len * chunk_count;
//     let secret = Fr::from_str("1927409816240961209460912649124", 10).unwrap();
//     let kzg_curve = Curve::new(&secret, n * 2);
//     let matrix = FK20Matrix::new(kzg_curve, n * 2, chunk_len, 10);
//     let polynomial = build_protolambda_poly(chunk_count, chunk_len, n);
//     // Act
//     let proofs = matrix.dau_using_fk20_multi(&polynomial);
//     // Assert

//     let expected = vec![
//         "1 3049109670073243942711931801211551991977350609702786082875404381705054902889931096164119150944119739492900124336718 3803822584037975486135926890961136037182668503033554406702973802744799509630262359817965611370864159333294931292175",
//         "1 658235374988622731991675177666095672656291387756593365624244986468346518201077057409039732423968458648837994174735 170658666960408025187423476299064494998912902640258589264830794057063295972343916527776401279871390447819757126953",
//         "1 1130030307519988448139295049461510689137443815100405310480493976965267608972045460391887929059913107097949172071274 911288853670895051259117233708763590036202015720787567004896457725130794934681239923678442140285678050983038168299",
//         "1 184629118130529419871030999265232663307951402211197098658674455562882083362295674399013655540875894788946477322610 151018441635394393779487005537260697520712932400843464500846745577910710608660322436531885388001200325206726382822",
//         "1 2965006218588171911839741411579274455192644911372149980469646566392972074663902475612733690733254541596653454904283 3275738345360711133832726174651771742395571354143432726706954907416467801246321209431055071215896484783596433736625",
//         "1 226211830732636399272913016291435289544236146253455171901132449681440440839680815281702922957676848869329764403133 1273222136784997093826876677486067241072759795029899813936082514685504740947934866532015493634821844030819498076895",
//         "1 1149776898582874828633842575343212404812094446145240314401748679472982280041452329353170311910023385405387674593276 1637952245507884813137885602336915093444400294864264642575791181396421113346001095622637722830079603538054013394481",
//         "1 3671406965382067478983181087394873895813113690618430410099472132018382932494462848773457060525727488613956237916770 3829765176925790120473358320055012101543579078175421537101525542306214004152149593326072127663015004822032541535514",
//         "1 2137434617919227137680124479623931713314737491185201745657630847252644069932385393878386176935271178312938010988692 2595433768146635676027788672937803502296632112218901299679018639313969094973844203166883184573651103390568085801542",
//         "1 2893208070843873309277321317652051436230408247670151173409515920482259208546916900748192556806181729564122818295148 459804412367023637651729293569664426246110838079127464241516501632883738002529280922732217507791898316821239797873",
//         "1 3205923980234644099221737743072317320063919320208377144490385357295490471644091537059418297831954929118386763523038 1288504508929959814414158800774383293256835476780341192971534799032406685703092780038084702655967032933028428945098",
//         "1 3225174118951822648584497923696240381542020657090095855020271969865693280449469772322072433428230107858611451485445 433992622026347280933529124004431262011884268032675432069826449404693982233636064330755751053333657937864816444877",
//         "1 2853782113129612133795837641193144604035620064578392188628559737847614194133441123745427605136128138635178897496002 806137158560414045196489349283568294612997342547684959629733953942191073627534913977997288935060367318134284243339",
//         "1 369973130057525845989015185664311486557821737062180001473059796142226562693448212290989708215386553356446897734103 1182124007588358644663978802314385537788779267209014363985652807033438634600830249367699699541525485237656325113819",
//         "1 2264571844781141959191779082490912645128683845271352908867933224387329888642704803701608897486932142183607568614052 1028215621763961025128743424439709026502978589810138918517875913737272123626185774864840714501605279512293826481651",
//         "1 2736796969582277298046221237579106469241080875733710339086583219851850933444141885926466467584972544565785782295125 2355152503823994882114160820860379167854113619454271503730927433225296043851468473219480354129014614931941930849576",
//         "1 1168390407886734887717966303111231278719570305182204694317239720869809166090743330980039486527976335091089216648778 1934769259338575890701363612119485940635687151940592140345541909524549943682524790737060962484243564997095247232597",
//         "1 3252759351667653266470679048886421374131770288372637583331028528874761138417717777972725688672181742494918320232197 24342955530195236963041786259374011817266321019638174000860813936891099695670800249546705818989754841531701159199",
//         "1 2180644859325969809531199058330182983311912424542075500243193977938444608379328335962032916475177414228522715196986 531481339653002742605615041773733589604381196761630888823346991134350271146840998999051858297727170588353043393454",
//         "1 3816593091473350513700679790876022359154900407339315734093887653792948324157436596675446721382472759529837736267233 1981421425169983417632200190282195796450663660579938985718145570868340670967760415281115509294180261116548333651680",
//         "1 302897050875298705703283981596996991015612011694440401556683146767088218705270010796962116018944148757674812495839 2170665093489390599160241404048224124812861408473929366096485634292898811383949948942709140700119096523267010521716",
//         "1 1704091680632916920339057420329420385648782751299879359007384363962120643496465008654151695685874927309675200002800 3984291653652699653065701427817239744202179650424363211696148443449860491396089551367527622898921941022046820789468",
//         "1 261778742290110140366076531798732132033197983737582754757082866939691516459023694651214432940933331007050524667091 1424049893034598632045905011237129938497646238436427939687897713412736615989753077945464536842492952258704192781415",
//         "1 3014938822530517707612563854568326963731081193994879617444224583283187323265083743364165173201909610206052912041288 2643216766554474849347794880006777726435696409265041443759799011352785142583303751098496135983555310522287392482015",
//         "1 2953027679209148532521241459634984086536857016943499308491406213978216521716559735507366098092985987297862584558981 1492449947535208338231259441844857908576708279413481753338372917119481299939870186903185286297278020437233411208234",
//         "1 616980473529098999393427231387709801230214960036443392464416095933330644067328036425843208491478657821030999384322 1603255868870050243428889675607333038651071386156094929881055026116715204759385216167080777635575028041532215734402",
//         "1 2524653663673463103965440962912888444071376533252025941428734913603758455281716449003825412513812303128880754949381 2639496572521639559328406132445709180692953505915875210226717841842067742348275225496935566371233160274949954755250",
//         "1 591201233666441000647964802791191434921597667798306675020399956529377713817853650746206610327279646873311461394337 396095043193100021559225292969991035010259567365047746600110797201107151857944961241452591537857312230235898173550",
//         "1 2209841347337504027298746232150472396812720101984759689612173256094097998142512037358502565733255699012621861091228 217248284934454074657446489350527503217952916770877058681292976415195994228420003633307742264276831791371522399577",
//         "1 2033320011776628583869744439428308624738531272318395551598286257417844744926132625231658065422648778457570427848476 3795771036318493474673600438303901230565877236832396230613562603152206815109547479438698538405892536910781059689239",
//         "1 1006474202722518854241793437158456116697497354868758296437055826177113576674090074489625764858501388062161281184950 3328721796166965045488739611778325237957580879022654727614943976303518110709162253442422673693183301387551242930934",
//         "1 2436291363234584225951005116304939754967140799844304050431093694593461216772003580114980903190440331543153256487404 1944025990085753677033121004443654841655870548652994070751291129324492783280023180223826394983675459612530868915495",
//         "1 488012660445297837065946940671394449208592861195365968172276642060104464475817817444379281474659601425087432033419 880218684309236660402853631172467802196042915277918055509847437340208325785226920166019363686359735795512379386031",
//         "1 1428409243996059198034861091971475761418325098430284194948255537037085544210315692681384336906833983021823957384555 1424753930018125406824056283882283821957897940861739865375641876759439482977488517588620744625249905936341076122039",
//         "1 3254502238335214814517554609420815060691880314226955570204270018194705270213129991093354373792879751997722702136366 1478391668875851113543724582347596168545948046581865243981838765674654373836535371591064475092075271185219531884449",
//         "1 3217553929272096993601888287069884082531320522675211803786016653197375828447441580428842603912278983474169428652748 3379802546638432084724440636803312434088003748109397909184114409380001422110195432477148280521029806034283975531837",
//         "1 3788089332853432938766799277673725457064873731929638344041513934783613242371698993391408484167153716396460036805205 938511051923663772539776516116224544136719372492254208026134051389595698671182136489979549576523680152324202029009",
//         "1 1247704474523120779168931167401307018184573242213527649887824359720997600834936197321437044109782492256145636339702 1448553523747097143337783292809862537588401487738055277488929560725744850887287214010204283066549226431174113973889",
//         "1 1127429186036602308780522608934999868687921585498052211404016967025448367775052214631363626470530922574686883692460 672408927337644490222875125522136916312191926264177044153357488322547901946138486770383469468782496008159876672019",
//         "1 2086690109632642272447870337065028103961540784690857457316307162356818597383568234110019969194182271552145764152441 1955979794589392233724318999037480128719699812490139625417735857404526615660420349931222133500045127011614435159865",
//         "1 1938815620108164567180955402638031423826316271716510316691301979241466547544303760042696614690828331082214593352726 3956595416366239260474879295307289794795772192526485079081484657758264073298189594324146389255835241581613990208164",
//         "1 3151889862435366742501016923612278296892979709397274125585369365004610832839522196951673479966542950606612731680743 3553588475575294242016341047111146014917838200398037130981550362939257973609302823426956775691042564923992423492655",
//         "1 849573021684532446999967933992839525261344460767154253453431806818530393923752290964662775625688105076989209888985 190011245662137907909256860812306901877485802350986421502079643920280574106940641014873203560626150634878596496836",
//         "1 864243516748681474717236495977930140680933400819591435652335059547949437841040276200083849458249836353553630749854 984807954653274671803283773627966584136032108108658306339902858177683643828845573586090007203626153690317032417540",
//         "1 2494542486243118620059532492891175994518742657079260134752700613247754605508262095733956907483479380709902905033842 3658888642376338417254020186731758610636164227862354835081371641512635881145780734795272913541427585074350219015721",
//         "1 264132726799810243189350587670745048920154713369306161293286151494576162781844464620298105008256034856490484057320 1042899353803691606000261482908466711114137377107787795618380568300915216740525308647083258614943723332196171057287",
//         "1 429097533359462718070366403668675932578278552070922010146217719315934244077233613438196824414420018191713983494865 3059733090430070418361659068220140231519799336569956580087342284380943109170775208264795631655567728140277545717465",
//         "1 2624454966557978652365578738379795641328990838424934007080853511017453783778500771424012996056221545154138539603491 388145349704142670716717791003683429709579585763674924641984565422268747707759828315299352352755767679109570538723",
//         "1 2330557824108149292765308298800373839736370637461799609828805507923826370501362137184416307190818396528071666763554 761698249139677985779676078183692810628068887131496081380141956910869639393360620706422152273420173856593615873989",
//         "1 2260826233449488990871758739890499511318172033523864279777819457164905555960336645122484916267837754700617905554691 3586388074591443866194754783149037319353483564214652533348633255755748973551444855882207876438617492636202166744025",
//         "1 2645823359123880746590774878804249059682099875827840160419087159626304315120696625819894618626323445297411738288015 3523444762676563524480442965995210123003337033213575291323892038736745129932637446059011036862847735317998427087754",
//         "1 3506937036895095073657547529563342349609873909322255567927773026448969712178158320213067175021494473189763593835798 518508850306909802863884353275302217996944580834347753302651780191445761521456253277360714873602554862298375902256",
//         "1 3574612772404738832800943764796542675865441044711406850119038358608695059056389276895053341293269562047387509133568 2472281453911274486120884749992344304658829510662021670785271838275518121350284489992410388677761399725507918289745",
//         "1 151013110218353564639946679308762520933930490939195383288451782134580721467650501972867339739296578602979277267074 3265104433752729946220284548715719694818421613722315589583569463003045872578897937002238490806536235554280060887088",
//         "1 3758383139120564219509059314479582962173782602454558891526576858576474553908857057426352812162220348117828702420906 2870118308659054666896648400526066440559023518009797194689746393735228862993974889532753117292823557783819096061277",
//         "1 690005440500710402693504132900670871221537986532478208044604643573196011621043953129585699894032300240346473547685 1170629884697634637922728816184368752643287923137165179608903004422976094574955608954074214418545122955256241898152",
//         "1 1602634746217777688978746688922149627191904410631337330976847479235055040444628564987496583169322237383671539597477 2401142629933182803129123159610149066707120037920240426411140969961610467103947475652921088520771413782962008511286",
//         "1 949903287489545585636612346848188825969331515152905139508887072183231919553574003972007136336504659716678058206911 3006744017035726759407700294475023340459058782231221593375643095628937552108837425922284831084517678663883436415632",
//         "1 552257874025534510327816741956209040205322907175837548553044964889527773735859145148925452789317429441782859284412 332508832373214500733444001578313181477419744770452640715796767105059989494637309372776496559348095972296999315482",
//         "1 662270332047780538236761160233282592027420752455270155418869852132492676666630700668832220500077525466061941018236 2299125391817702013055110693471044319922613065157535939085724616261923156462807520354440037023941486342197559986853",
//         "1 539671814285151908354149493379775679230447318192963987668428133547804094161329213479620652127776798553660663411584 1503319234234984822166752674325584018890559572903102294038222208008964603696679883044023293697034293775749956692179",
//         "1 1296246431649712555866080335511348675539520098184218301579333894833004472470244738946867536358943211935423055111558 1769793836751496188671353199640496137137574250307972332710165135300898774697581735572475470798279089231072331902299",
//         "1 380145186617786820248621832307713531127003359562662906822571904797720854922616044101952325592420496820383385512579 1840140859664201837702586956346199014913668307776292190320451086631178028711553155893237996505496618826800059544115",
//         "1 3114829031510841915621151916229561169189336605250941601689638461262358283048552069985585585970065241083080648099448 1331219795754692980309076688401603360766908614177898374418067681635672907558036412724043587283913495319664895110963",
//     ];

//     assert_eq!(expected.len(), proofs.len());
//     for (actual, expected) in proofs.iter().zip(expected) {
//         assert_eq!(expected, actual.get_str(10));
//     }
// }

// #[test]
// fn fr_fft_works_on_extended_data() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     let chunk_len: usize = 16;
//     let chunk_count: usize = 32;
//     let n = chunk_len * chunk_count;
//     let secret = Fr::from_str("1927409816240961209460912649124", 10).unwrap();
//     let kzg_curve = Curve::new(&secret, n * 2);
//     let matrix = FK20Matrix::new(kzg_curve, n * 2, chunk_len, 10);
//     let polynomial = build_protolambda_poly(chunk_count, chunk_len, n);

//     // Act
//     let extended_poly = polynomial.get_extended(n * 2);
//     let mut extended_data = matrix.kzg_settings.fft_settings.fft(&extended_poly.coeffs, false);
//     order_by_rev_bit_order(&mut extended_data);

//     // Assert
//     assert_eq!(1024, extended_data.len());
//     assert_eq!("23460229677428266615002007477956548356146403649357635172538975946710492134789", extended_data.last().unwrap().get_str(10));
// }

// #[test]
// fn fk20_multi_proof_full_circle_fixed_value() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     let chunk_len: usize = 16;
//     let chunk_count: usize = 32;
//     let n = chunk_len * chunk_count;
//     let n2 = n << 1;
//     let secret = Fr::from_str("1927409816240961209460912649124", 10).unwrap();
//     let kzg_curve = Curve::new(&secret, n2);
//     let matrix = FK20Matrix::new(kzg_curve, n2, chunk_len, 10);
//     let polynomial = build_protolambda_poly(chunk_count, chunk_len, n);
//     let proofs = matrix.dau_using_fk20_multi(&polynomial);
//     let extended_poly = polynomial.get_extended(n2);
//     let commitment = polynomial.commit(&matrix.kzg_settings.curve.g1_points);
//     let mut extended_data = matrix.kzg_settings.fft_settings.fft(&extended_poly.coeffs, false);
//     order_by_rev_bit_order(&mut extended_data);

//     // Act
//     let domain_stride = matrix.kzg_settings.fft_settings.max_width / n2;
//     for (pos, item) in proofs.iter().enumerate().take(chunk_count * 2) {
//         let domain_pos = reverse_bits_limited(chunk_count, pos);
//         let x = &matrix.kzg_settings.fft_settings.exp_roots_of_unity[domain_pos * domain_stride];

//         let mut ys: Vec<Fr> = extended_data.iter().copied()
//             .skip(chunk_len * pos).take(chunk_len)
//             .collect();
//         order_by_rev_bit_order(&mut ys);

//         let mut ys2 = vec![Fr::default(); chunk_len];
//         let stride = matrix.kzg_settings.fft_settings.max_width / chunk_len;
//         let mut coset = vec![Fr::default(); chunk_len];
//         for i in 0..chunk_len {
//             coset[i] = x * &matrix.kzg_settings.fft_settings.exp_roots_of_unity[i * stride];
//             ys2[i] = polynomial.eval_at(&coset[i]);
//         }
//         // Assert
//         for (a, b) in ys.iter().zip(ys2) {
//             assert_eq!(a.get_str(10), b.get_str(10));
//         }
//         let proof = item;
//         let valid = matrix.check_proof_multi(&commitment, proof, x, &ys);
//         assert!(valid);
//     }
// }

// #[test]
// fn fk20_multi_proof_full_circle_random_secret() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     let chunk_len: usize = 16;
//     let chunk_count: usize = 32;
//     let n = chunk_len * chunk_count;
//     let n2 = n << 1;
//     let mut secret = Fr::default();
//     secret.set_by_csprng();
//     let kzg_curve = Curve::new(&secret, n2);
//     let matrix = FK20Matrix::new(kzg_curve, n2, chunk_len, 10);
//     let polynomial = build_protolambda_poly(chunk_count, chunk_len, n);
//     let proofs = matrix.dau_using_fk20_multi(&polynomial);
//     let extended_poly = polynomial.get_extended(n2);
//     let commitment = polynomial.commit(&matrix.kzg_settings.curve.g1_points);
//     let mut extended_data = matrix.kzg_settings.fft_settings.fft(&extended_poly.coeffs, false);
//     order_by_rev_bit_order(&mut extended_data);

//     // Act
//     let domain_stride = matrix.kzg_settings.fft_settings.max_width / n2;
//     for (pos, item) in proofs.iter().enumerate().take(chunk_count * 2) {
//         let domain_pos = reverse_bits_limited(chunk_count, pos);
//         let x = &matrix.kzg_settings.fft_settings.exp_roots_of_unity[domain_pos * domain_stride];

//         let mut ys: Vec<Fr> = extended_data.iter().copied()
//             .skip(chunk_len * pos).take(chunk_len)
//             .collect();
//         order_by_rev_bit_order(&mut ys);

//         let mut ys2 = vec![Fr::default(); chunk_len];
//         let stride = matrix.kzg_settings.fft_settings.max_width / chunk_len;
//         let mut coset = vec![Fr::default(); chunk_len];
//         for i in 0..chunk_len {
//             coset[i] = x * &matrix.kzg_settings.fft_settings.exp_roots_of_unity[i * stride];
//             ys2[i] = polynomial.eval_at(&coset[i]);
//         }
//         // Assert
//         for (a, b) in ys.iter().zip(ys2) {
//             assert_eq!(a.get_str(10), b.get_str(10));
//         }
//         let proof = item;
//         let valid = matrix.check_proof_multi(&commitment, proof, x, &ys);
//         assert!(valid);
//     }
// }

// // DAS
// #[test]
// fn das_ftt_extension_should_extend_with_exact_values_given_known_inputs() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));

//     let settings = FFTSettings::new(4);
//     let half = settings.max_width >> 1;
//     let mut nums: Vec<Fr> = (0..half).map(|x| Fr::from_int(x as i32)).collect();

//     // Act
//     settings.das_fft_extension(&mut nums);

//     // Assert
//     let expected = [
// 		"40848550508281085032507004530576241411780082424652766156356301038276798860159",
// 		"6142039928270026418094108197259568351390689035055085818561263188953927618475",
// 		"11587324666845105443475591151536072107134200545187128887977105192896420361353",
// 		"22364018979440222199939016627179319600179064631238957550218800890988804372329",
// 		"11587324666845105443475591151536072107134200545187128887977105192896420361353",
// 		"6142039928270026418094108197259568351390689035055085818561263188953927618475",
// 		"40848550508281085032507004530576241411780082424652766156356301038276798860159",
// 		"17787776339145915450250797138634814172282648860553994191802836368572645501264",
//     ];

//     assert_eq!(expected.len(), nums.len());
//     let all_values_equal = expected.iter().zip(expected.iter()).all(|(a, b)| a == b);
//     assert!(all_values_equal);
// }

// #[test]
// fn polynomial_recover_from_samples_should_recover_all_values_given_less_than_half_of_data_is_missing() {
//     // Arrange
//     assert!(init(CurveType::BLS12_381));
//     let settings = FFTSettings::new(10);

//     let coeffs: Vec<i32> = (0..((settings.max_width >> 1) as i32)).collect();
//     let poly = Polynomial::from_i32(&coeffs);
//     // extend for redundancy
//     let extended = poly.get_extended(settings.max_width);
//     let data = settings.fft(&extended.coeffs, false);

//     // remove 1/4th of data
//     let data_with_missing: Vec<Option<Fr>> = data
//         .iter()
//         .enumerate()
//         .map(|(ix, entry)| {
//             if ix % 4 == 0 {
//                 return None::<Fr>;
//             }
//             Some(*entry)
//         }).collect();

//     // Act
//     let recovered = Polynomial::recover_from_samples(&settings, &data_with_missing);

//     // Assert
//     assert_eq!(data.len(), recovered.order());
//     for (i, item) in data.iter().enumerate() {
//         assert_eq!(item.get_str(10), recovered.coeffs[i].get_str(10));
//     }
// }

// // Helpers
// // Based on poly seen in TestKZGSettings_DAUsingFK20Multi
// // A poly that helps test edge cases of some Fr values, helps with informal correctness verification
// fn build_protolambda_poly(chunk_count: usize, chunk_len: usize, n: usize) -> Polynomial {
//     assert!(init(CurveType::BLS12_381));
//     let mut poly_vals = vec![Fr::default(); n];
//     let v134 = Fr::from_int(134);
//     for i in 0..chunk_count {
//         let base: Vec<i32> = vec![1, 2, 3, 4 + i as i32, 7, 8 + (i*i) as i32, 9, 10, 13, 14, 1, 15, 0, 1000, 0, 33];
//         for j in 0..base.len() {
//             poly_vals[i * chunk_len + j] = Fr::from_int(base[j]);
//         }
//         poly_vals[i * chunk_len + 12] = Fr::zero() - Fr::one();
//         poly_vals[i * chunk_len + 14] = Fr::zero() - v134;
//     }

//     Polynomial::from_fr(poly_vals)
// }
