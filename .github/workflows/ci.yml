name: CI Build

on: [push]

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-11]

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy, rustfmt

      # 1st team #########################################################

      - name: "[arkworks] Tests without parallel"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path Arkworks/Cargo.toml --no-fail-fast

      - name: "[arkworks] Tests with parallel"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path Arkworks/Cargo.toml --no-fail-fast --features parallel

      - name: "[arkworks] Clippy"
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path Arkworks/Cargo.toml --all-targets --all-features -- -D warnings

      - name: "[arkworks] Formatting"
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path Arkworks/Cargo.toml

      # 2nd team #########################################################

      - name: "[zkcrypto] Tests without parallelization"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path zkcrypto/Cargo.toml --no-fail-fast

      - name: "[zkcrypto] Tests with parallelization"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path zkcrypto/Cargo.toml --no-fail-fast --features parallel

      - name: "[zkcrypto] Clippy"
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path zkcrypto/Cargo.toml --all-targets --all-features -- -D warnings

      - name: "[zkcrypto] Formatting"
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path zkcrypto/Cargo.toml

      # 3rd team #########################################################

      - name: "[blst-from-scratch] Tests"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path blst-from-scratch/Cargo.toml --no-fail-fast

      - name: "[blst-from-scratch] Tests (parallel)"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path blst-from-scratch/Cargo.toml --no-fail-fast --features parallel

      - name: "[blst-from-scratch] Clippy"
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path blst-from-scratch/Cargo.toml --all-targets --all-features -- -D warnings

      - name: "[blst-from-scratch] Formatting"
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path blst-from-scratch/Cargo.toml

      # 4th team #########################################################

      - name: "[ckzg] Build native libs for Linux"
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install libomp-dev
          echo "LIBOMP_PATH=$(find /usr/lib/llvm* -name libiomp5.so | head -n 1)" >> $GITHUB_ENV
          echo "OMP_NUM_THREADS=$(nproc)" >> $GITHUB_ENV
          cd ckzg && bash build.sh

      - name: "[ckzg] Build native libs for MacOS"
        if: matrix.os == 'macos-11'
        run: |
          brew install libomp gnu-sed
          ln -s /usr/local/opt/libomp/lib/libomp.dylib /usr/local/lib
          ln -s /usr/local/opt/libomp/include/omp.h /usr/local/include
          echo "LIBOMP_PATH=/usr/local/lib/libomp.dylib" >> $GITHUB_ENV
          echo "OMP_NUM_THREADS=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
          cd ckzg && bash build.sh

      - name: "[ckzg] Setup Env"
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-11'
        run: |
          if [[ -z "$LIBOMP_PATH" ]]; then
            echo "FAIL: LLVM OpenMP runtime was not found"
            exit 1
          fi
          echo "RUSTFLAGS=-C link-arg="$LIBOMP_PATH"" >> $GITHUB_ENV

      - name: "[ckzg] Tests without parallelization"
        uses: actions-rs/cargo@v1
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-11'
        with:
          command: test
          args: --manifest-path ckzg/Cargo.toml --no-fail-fast

      - name: "[ckzg] Tests with parallelization"
        uses: actions-rs/cargo@v1
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-11'
        with:
          command: test
          args: --manifest-path ckzg/Cargo.toml --no-fail-fast --features parallel

      - name: "[ckzg] Clippy"
        uses: actions-rs/cargo@v1
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-11'
        with:
          command: clippy
          args: --manifest-path ckzg/Cargo.toml --all-targets --all-features -- -D warnings

      - name: "[ckzg] Formatting"
        uses: actions-rs/cargo@v1
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-11'
        with:
          command: fmt
          args: --manifest-path ckzg/Cargo.toml

      - name: "[ckzg] Unset Env"
        run: |
          echo "RUSTFLAGS=" >> $GITHUB_ENV
          echo "LIBOMP_PATH=" >> $GITHUB_ENV

      # 5th team ###########################################################

      - name: "[mcl10-rust] Build mcl for Linux"
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd mcl/kzg && bash build.sh

      - name: "[mcl10-rust] Run tests without parallel"
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo test shared_tests --manifest-path mcl/kzg-bench/Cargo.toml --no-fail-fast -- --test-threads 1

      - name: "[mcl10-rust] Run tests with parallel"
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo test shared_tests --manifest-path mcl/kzg-bench/Cargo.toml --no-fail-fast --features mcl_rust/parallel -- --test-threads 1

      - name: "[mcl10-rust] Run Clippy"
        if: matrix.os == 'ubuntu-latest'
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path mcl/kzg/Cargo.toml --all-targets --all-features -- -D warnings

      - name: "[mcl10-rust] Run fmt"
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo fmt --manifest-path mcl/kzg-bench/Cargo.toml

      # Common ###########################################################

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path kzg-bench/Cargo.toml
