From 4827bc7aef00721206d42b2615b5340344e488b3 Mon Sep 17 00:00:00 2001
From: sirse <artiom.tretjakovas2@gmail.com>
Date: Thu, 16 Oct 2025 14:51:36 +0300
Subject: [PATCH] Patch rust bindings

---
 Cargo.toml             |  1 +
 bindings/rust/build.rs | 50 +++---------------------------------------
 2 files changed, 4 insertions(+), 47 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index 75784d3..d7e4e94 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,3 +1,4 @@
+[workspace]
 [package]
 name = "c-kzg"
 version = "2.1.5"
diff --git a/bindings/rust/build.rs b/bindings/rust/build.rs
index 2f4170a..14b0963 100644
--- a/bindings/rust/build.rs
+++ b/bindings/rust/build.rs
@@ -3,53 +3,9 @@ use std::{env, path::PathBuf};
 fn main() {
     let root_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
 
-    // Obtain the header files of blst
-    let blst_base_dir = root_dir.join("blst");
-    let blst_headers_dir = blst_base_dir.join("bindings");
-
-    let c_src_dir = root_dir.join("src");
-
-    let mut cc = cc::Build::new();
-
-    #[cfg(all(windows, target_env = "msvc"))]
-    {
-        cc.flag("-D_CRT_SECURE_NO_WARNINGS");
-
-        // In blst, if __STDC_VERSION__ isn't defined as c99 or greater, it will typedef a bool to
-        // an int. There is a bug in bindgen associated with this. It assumes that a bool in C is
-        // the same size as a bool in Rust. This is the root cause of the issues on Windows. If/when
-        // this is fixed in bindgen, it should be safe to remove this compiler flag.
-
-        // This flag is for MSVC
-        cc.flag_if_supported("/std:c11");
-
-        // This is for GCC
-        cc.flag_if_supported("-std=c11");
-    }
-
-    cc.include(c_src_dir.clone());
-    cc.include(blst_headers_dir.clone());
-    cc.warnings(false);
-    cc.file(c_src_dir.join("ckzg.c"));
-    #[cfg(not(debug_assertions))]
-    cc.define("NDEBUG", None);
-
-    cc.try_compile("ckzg").expect("Failed to compile ckzg");
-
-    #[cfg(feature = "generate-bindings")]
-    {
-        let header_path = c_src_dir.join("ckzg.h");
-        let bindings_out_path = root_dir.join("bindings/rust/src/bindings/generated.rs");
-        make_bindings(
-            header_path.to_str().expect("valid header path"),
-            c_src_dir.to_str().expect("valid c src path"),
-            blst_headers_dir.to_str().expect("valid blst header path"),
-            &bindings_out_path,
-        );
-    }
-
-    // Finally, tell cargo this provides ckzg/ckzg_min
-    println!("cargo:rustc-link-lib=ckzg");
+    let rust_kzg_target_dir = root_dir.join("lib");
+    println!("cargo:rustc-link-search={}", rust_kzg_target_dir.display());
+    println!("cargo:rustc-link-arg=-lrust_kzg_constantine");
 }
 
 #[cfg(feature = "generate-bindings")]
-- 
2.43.0

